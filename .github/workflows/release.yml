name: Release

on:
  push:
    tags:
      - 'v*.*.*' # Ê≠£ÂºèÁâàÊú¨Ôºöv1.0.0
      - 'v*.*.*-beta.*' # Beta ÁâàÊú¨Ôºöv1.0.0-beta.1
      - 'v*.*.*-alpha.*' # Alpha ÁâàÊú¨Ôºöv1.0.0-alpha.1

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            arch: x64
            runs-on: macos-latest
          - os: macos
            arch: arm64
            runs-on: macos-latest
          - os: windows
            arch: x64
            runs-on: windows-latest
          - os: windows
            arch: arm64
            runs-on: windows-11-arm
          - os: linux
            arch: x64
            runs-on: ubuntu-latest
          - os: linux
            arch: arm64
            runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤ÔºåÁî®‰∫éÂàÜÊîØÊ£ÄÊü•

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/AppData/Local/electron/Cache
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-${{ matrix.arch }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-electron-

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage -- --run

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: |
          if [ "${{ matrix.os }}" = "windows" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run build:win:arm64
          elif [ "${{ matrix.os }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run build:linux:arm64
          elif [ "${{ matrix.os }}" = "windows" ]; then
            npm run build:win
          elif [ "${{ matrix.os }}" = "macos" ]; then
            npm run build:mac
          elif [ "${{ matrix.os }}" = "linux" ]; then
            npm run build:linux
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build
          path: |
            release/**/*.dmg
            release/**/*.zip
            release/**/*.dmg.blockmap
            release/**/*.zip.blockmap
          retention-days: 30

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-build
          path: |
            release/**/*.exe
            release/**/*.exe.blockmap
          retention-days: 30

      - name: Upload artifacts (Linux)
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-build
          path: |
            release/**/*.AppImage
            release/**/*.deb
            release/**/*.AppImage.blockmap
          retention-days: 30

      - name: Check if tag is on main branch
        id: check_branch
        run: |
          git fetch --all
          BRANCHES=$(git branch -r --contains ${{ github.ref }})
          echo "Branches containing this tag:"
          echo "$BRANCHES"

          if echo "$BRANCHES" | grep -q "origin/main"; then
            echo "is_main=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag is on main branch, will create release"
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag is NOT on main branch, skipping release creation"
            echo "üí° Artifacts are still available for download from Actions page"
          fi
        shell: bash

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Detect version type
        if: startsWith(github.ref, 'refs/tags/')
        id: version_type
        run: |
          if [[ "${{ github.ref_name }}" =~ alpha ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "draft=true" >> $GITHUB_OUTPUT
            echo "type=alpha" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" =~ beta ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
            echo "type=beta" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
            echo "type=stable" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Get previous tag
        if: startsWith(github.ref, 'refs/tags/')
        id: previous_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use the initial commit
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate CHANGELOG
        if: startsWith(github.ref, 'refs/tags/')
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-config.json'
          # ‰ªé‰∏ä‰∏Ä‰∏™ tag Âà∞ÂΩìÂâç tag ÁöÑÂèòÊõ¥
          fromTag: ${{ steps.previous_tag.outputs.previous_tag }}
          toTag: ${{ github.ref_name }}
          # ËæìÂá∫Ê†ºÂºè
          outputFile: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: |
          startsWith(github.ref, 'refs/tags/') &&
          steps.check_branch.outputs.is_main == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/**/FFmpeg-GUI-*.dmg
            release/**/FFmpeg-GUI-*.zip
            release/**/FFmpeg-GUI-*.exe
            release/**/FFmpeg-GUI-*.AppImage
            release/**/FFmpeg-GUI-*.deb
            release/**/FFmpeg-GUI-*.dmg.blockmap
            release/**/FFmpeg-GUI-*.zip.blockmap
            release/**/FFmpeg-GUI-*.exe.blockmap
            release/**/FFmpeg-GUI-*.AppImage.blockmap
          draft: ${{ steps.version_type.outputs.draft == 'true' }}
          prerelease: ${{ steps.version_type.outputs.prerelease == 'true' }}
          generate_release_notes: false
          body: |
            ## üì¶ Download

            | Platform | Architecture | Download Link |
            |----------|--------------|---------------|
            | **macOS** | Intel (x64) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-mac-x64.dmg](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-mac-x64.dmg) |
            | **macOS** | Apple Silicon (arm64) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-mac-arm64.dmg](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-mac-arm64.dmg) |
            | **Windows** | x64 | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-win-x64.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-win-x64.exe) |
            | **Windows** | ARM64 | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-win-arm64.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-win-arm64.exe) |
            | **Linux** | x64 (AppImage) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-x64.AppImage](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-x64.AppImage) |
            | **Linux** | x64 (deb) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-x64.deb](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-x64.deb) |
            | **Linux** | ARM64 (AppImage) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-arm64.AppImage](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-arm64.AppImage) |
            | **Linux** | ARM64 (deb) | [FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-arm64.deb](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/FFmpeg-GUI-${{ steps.version.outputs.VERSION }}-linux-arm64.deb) |

            ### üí° Installation Notes

            #### macOS

            ‚ö†Ô∏è **Important**: This app is not signed with an Apple Developer certificate. You'll need to remove the quarantine attribute or self-sign the app.

            1. Download the `.dmg` file for your architecture
            2. Open the DMG and drag the app to Applications folder
            3. **Remove quarantine attribute** (Recommended):
               ```bash
               sudo xattr -r -d com.apple.quarantine /Applications/FFmpeg\ GUI.app
               ```
            4. **Alternative - Self-sign the app**:
               ```bash
               # Remove extended attributes first
               xattr -cr /Applications/FFmpeg\ GUI.app
               # Ad-hoc sign the app
               sudo codesign -fs - /Applications/FFmpeg\ GUI.app
               ```

            > üí° After running either command, you should be able to open the app normally.

            #### Windows

            Download the `.exe` installer for your architecture and run it.

            #### Linux

            - **AppImage**: Download, make executable (`chmod +x`), and run
            - **deb**: Install with `sudo dpkg -i <filename>.deb`

            ---

            ## üìù What's Changed

            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify skipped release
        if: |
          startsWith(github.ref, 'refs/tags/') &&
          steps.check_branch.outputs.is_main != 'true'
        run: |
          echo "=========================================="
          echo "‚ö†Ô∏è RELEASE SKIPPED"
          echo "=========================================="
          echo "Tag: ${{ github.ref_name }}"
          echo "Reason: Tag is not on main branch"
          echo ""
          echo "‚úÖ Build artifacts have been created and uploaded"
          echo "üì• You can download them from the Actions artifacts"
          echo ""
          echo "To create a release:"
          echo "1. Merge to main branch"
          echo "2. Create tag on main: git tag ${{ github.ref_name }}"
          echo "3. Push tag: git push origin ${{ github.ref_name }}"
          echo "=========================================="
        shell: bash
